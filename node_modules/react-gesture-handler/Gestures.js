"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gestures = void 0;
var hammerjs_1 = __importDefault(require("hammerjs"));
var react_1 = __importDefault(require("react"));
exports.Gestures = function (_a) {
    var children = _a.children, options = _a.options, recognizers = _a.recognizers;
    var containerRef = react_1.default.useRef(null);
    react_1.default.useLayoutEffect(function () {
        var $container = containerRef.current;
        var hammer = null;
        var recognizersKeyType = [];
        if ($container) {
            hammer = new hammerjs_1.default.Manager($container, options);
            if (recognizers && hammer !== undefined) {
                recognizersKeyType = Object.keys(recognizers);
                recognizersKeyType.forEach(function (recognizerType) {
                    var _a, _b;
                    var events = (_a = recognizers[recognizerType]) === null || _a === void 0 ? void 0 : _a.events;
                    var options = (_b = recognizers[recognizerType]) === null || _b === void 0 ? void 0 : _b.options;
                    hammer === null || hammer === void 0 ? void 0 : hammer.add(new hammerjs_1.default[recognizerType](options));
                    if (events) {
                        Object.entries(events).forEach(function (_a) {
                            var _b = __read(_a, 2), eventName = _b[0], event = _b[1];
                            event && hammer && hammer.on("" + eventName, event);
                        });
                    }
                });
            }
        }
        return function () {
            if ($container && hammer && recognizers) {
                recognizersKeyType.forEach(function (recognizerType) {
                    var _a;
                    var events = (_a = recognizers[recognizerType]) === null || _a === void 0 ? void 0 : _a.events;
                    if (events) {
                        Object.entries(events).forEach(function (_a) {
                            var _b = __read(_a, 2), eventName = _b[0], event = _b[1];
                            event && hammer && hammer.off("" + eventName, event);
                        });
                    }
                });
                hammer.destroy();
            }
        };
    }, []);
    return react_1.default.createElement("div", { ref: containerRef }, children);
};
exports.default = exports.Gestures;
